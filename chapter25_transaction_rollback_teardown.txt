{{toc}}

! Transaction Rollback Teardown

!! がいよう
''How do we tear down the Test Fixture when it is in a relational database?''

'''We roll back the uncommitted test transaction as part of the teardown.'''

!! がいようのほそく
* 繰り返し実行可能で (ry
* あらゆる環境を適切に掃除することを (ry

* コミットしてないせいで残ってしまったデータベースへの変更は、ロールバックで回避できます

!! How It Works

* 私たちのテストの振る舞い
** 新しいトランザクションを開始します
** フィクスチャーを生成します
** SUT のテストを実行します
** テストの出力を検証します
** トランザクションをロールバックします

!! When to Use It

* ''Fresh Fixture'' (pp.311) とロールバック可能なデータベースを使っているときに使えるパターンです
** 他にもいくつか前提条件があります


* SUT が、トランザクション中で呼ばれることを想定したメソッドを公開しているような状況があります
** ''Humber Transaction Controller'' (pp.695)
** コントローラがチープな場合 ?

* メソッドがトランザクションを開始しないし、コミットもしない
** テスト駆動開発をしているなら、''Transaction Rollback Teardown'' を応用すると最終的にこういう設計になります

* 既存システムに後付けで ''Transaction Rollback Teardown'' なテストを書くためには
** 事前に ''Humble Transaction Controller'' を使うようにリファクタリングしなければなりません

* テストの前後でデータベースの状態が変わらないところはナイスです

* どれを掃除するか、または掃除しないかを決める必要がありません

* データベースのスキーマやデータの変更は、teardown ロジックに何も影響しません

* ''Table Truncation Teardown'' (pp.661) よりシンプルです

* 実際のデータベースでテストを実行するときの注意点
** データベースアクセスのないテストに対して 50 倍時間がかかります
** ''In-Memory Database'' (pp.551) に置き換えない限り ''Slow Tests'' (pp.253) になってしまいます
** トランザクション機能に依存してるので、ACID をサポートしてない単純な Fake Database では荷が重いです
** どこかでトランザクションがコミットされてしまっても何もできません

* よく分からない箇所でコミットされるせいで混乱した例を紹介しましょう
[[担当割当表/PARTⅢ/Transaction Rollback Teardown/Column]]

!! Implementation Notes

* 本体だけでこのパターンをサポートしている xUnit ファミリーはあまり多くありません
** オープンソースの拡張はいくつかあります
* もし何もなくても、自分で実装するのは簡単です
* 真剣に考慮すべきは、テストに、SUT のトランザクション不要なメソッドにアクセスさせることです
** ほとんどのドメインオブジェクトはトランザクション不要なので、ドメインオブジェクトのユニットテストではそれほど問題ではないです
* ''Subcutaneous Test'' (pp.337) を書くときに問題になるでしょう
** ''Service Facade'' [CJ2EEP] がトランザクション管理をするからです
** トランザクション不要なメソッドを公開するために、''Humble Transaction Controller'' パターンへのリファクタリングが必要かもしれません
** トランザクション不要なメソッドを、''Decorator'' [GOF] に委譲することも可能です
*** ''Poor Mans Humble Object'' と呼ばれる方法です

* クライアントから見えないメソッドがあるなら、テストのためにこれを公開しなければなりません
** ''public'' にしてテストすることができます
** ''Test-Specific Subclass'' (pp.579) によって間接的に公開することもできます
** ''Extract Tesable Component'' (pp.735) によって、トランザクション不要なメソッドを他のクラスの公開メソッドにすることもできます

* 更新されたデータの読み込みは、同一のトランザクション内で起こなわれなければなりません
* 普通は問題ないです
* シミュレーションやテストが、並列に実行されるときは問題になります
* ORM を使っている場合は、ORM に変更をデータベースに書き込ませなければなりません
** ''EntityManager.flush'' とか (EJB 3.0)
** データベースを直接読むオブジェクトがいるから

!! Motivating Example

* ''Guaranteed In-line Teardown'' の例です
* このコードは簡単に書けないし、正確でもないです

 [Test]
 public void TestGetFlightsByOrigin_NoInboundFlights() {
     // Fixture Setup
     long OutboundAirport = CreateTestAirport("1OF");
     long InboundAirport = CreateTestAirport("1IF");
     FlightDto ExpFlightDto = null;
     try {
         ExpFlightDto = CreateTestFlight(OutboundAirport, InboundAirport);
         // Exercise System IList FlightsAtDestination1 =
             Facade.GetFlightsByOriginAirport( InboundAirport);
         // Verify Outcome Assert.AreEqual( 0, FlightsAtDestination1.Count );
     } finally {
         Facade.RemoveFlight( ExpFlightDto.FlightNumber );
         Facade.RemoveAirport( OutboundAirport );
         Facade.RemoveAirport( InboundAirport );
     }
 }

!! Refactoring Notes

* setUp メソッドでフィクスチャーの生成をする前に ''beginTransaction'' を読んでおかなければなりません
* ''Creation Method'' (pp.415) を使っているなら、トランザクションをコミットしないように修正しましょう

!!! Example: Object Transaction Rollback Teardown

 public void testGetFlightsByOrigin_NoInboundFlight_TRBTD()
     throws Exception {
     // Fixture Setup
     TransactionManager.beginTransaction();
     BigDecimal outboundAirport = createTestAirPort("10F");
     BigDecimal inboundAirport = null;
     FlightDto expectedFlightDto = null;
     try {
         inboundAirport = createTestAirPort("11F");
         expectedFlightDto = createTestFlight(outboundAirport, inboundAirport);
         // Exercise System
         List flightsAtDestination1 = facade.getFlightsByOriginAirport(inboundAirport);
         // Verify Outcome
         assertEquals(0, flightsAtDestination1.size());
     } finally {
         TransactionManager.abortTransaction();
     }
 }

* teardown コードを ''abortTransaction'' の呼び出しに変更しました
* ''In-line Teardown'' なので、まだ ''finally'' ブロックは必要です
** ''tearDown'' メソッドへ移動するのは簡単なことです

* この例では生成されたフィクスチャーを元に戻していません
* フィクスチャーのオブジェクトはデータベースにコミットされていないからです
* ACID の "C" (consistent:一貫性) があるからです

* ''creation method'' はトランザクション不要バージョンの facade メソッドを呼んでいます
* ''Poor Mans Humble Object'' の一例になります
* ''getFlighsFromAirport'' などのメソッドがトランザクションを開始したり終了したりするなら、同じように修正しないといけません

 private BigDecimal createTestAirPort(String airPortName)
     throws FlightBookingException {
     BigDecimal newAirportId =
           facade._createAirport(airportName,
                                 " Airport" + airportName,
                                 "City" + airportName);
    return newAirportId;
 }

 public class Facade {
 
     public BigDecimal createAirport(String airportCode,
                                     String name,
                                     String nearbyCity)
              throws FlightBookingException {
         TransactionManager.beginTransaction();
         BigDecimal airportId = _createAirport(airportCode, name, nearbyCity);
         TransactionManager.commitTransaction();
         return airportId;
     }
     
     // private, nontransactional version for use by tests
     BigDecimal _createAirport(String airportCode,
                               String name,
                               String nearbyCity)
              throws FlightBookingException, InavlidArgumentException {
         Airport airport = dataAccess.createAirport(airportCode,name, nearbyCity);
         logMessage("CreateFlight", airport.getCode());
         rerutnr airport.getId();
     }
 
 }

!!! Example: Database Transaction Rollback Teardown

* 前の例ではデータベースの存在をデータアクセスレイヤのコードで隠蔽してました
* ''Domain Model'' [PEAA] を使っている場合の一般的なプラクティスです

* ''Transaction Rollback Teardown'' は、アプリケーションコードからデータベースを直接操作しているときでも使えます
** ''Transaction Script''[PEAA] として知られています
* .NET フレームワークの行セットを使っているときの例を示します

 [TestFixture]
 public class TransactionRollbackTearDownTest
 {
     private SqlConnection _Connection;
     private SqlTransaction _Transaction;
     
     public TransactionRollbackTearDownTest()
     {
     }
     
     [SetUp]
     public void Setup()
     {
         string dbConnectionString = ConfigurationSettings.AppSettings.Get("DbConnectionString");
         _Connection = new SqlConnection(dbConnectionString);
         _Connection.Open();
         _Transaction = _Connection.BeginTransaction();
     }
     
     [TearDow]
     public void TearDown()
     {
         _Transaction.Rollback();
         _Connection.CLose();
         // Avoid NUnit "instance behavior" bug
         _Transaction = null;
         _Connection = null;
     }
     
     [Test]
     public void AnNUnitTest()
     {
         const string C_INSERT_SQL =
             "INSERT INTO Invoice(Amount, Tax, CustomerId)" +
             " Values({0}, {1}, {2})";
         SqlCommand cmd = _Connection.CreateCommand();
         cmd.Transaction = _Transaction;
         cmd.CommandText = string.Format(
             C_INSERT_SQL,
             new object[]{"100.00", "7.00", 2001});
         // Exercise SUT
         cmd.ExecuteNonQuery();
         // Verify result
         // etc.
     }
 }

* ''Implicit Setup'' (pp.424) でコネクションを確立し、トランザクションを開始します
* テストメソッドが実行されます
* ''Implicit Teardown'' (pp.516) でトランザクションのロールバックとコネクションの切断を行います
** ''NUnit'' なのでインスタンス変数には null を代入します (テストオブジェクトが使い回されるから)
** 詳しくは pp.384 のコラムを読んでください
