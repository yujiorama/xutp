{{toc}}

! Transaction Rollback Teardown

''How do we tear down the Test Fixture when it is in a relational database?''

'''We roll back the uncommitted test transaction as part of the teardown.'''

* 繰り返し実行可能で (ry
* あらゆる環境を適切に掃除することを (ry

* コミットしてないせいで残ってしまったデータベースへの変更は、ロールバックで回避できます

!! How It Works

* 私たちのテストの振る舞い
** 新しいトランザクションを開始します
** フィクスチャーを生成します
** SUT のテストを実行します
** テストの出力を検証します
** トランザクションをロールバックします

!! When to Use It

* ''Fresh Fixture'' (pp.311) とロールバック可能なデータベースを使っているときに使えるパターンです
** 他にもいくつか前提条件があります


* SUT が、トランザクション中で呼ばれることを想定したメソッドを公開しているような状況があります
** ''Humber Transaction Controller'' (pp.695)
** コントローラがチープな場合 ?

* メソッドがトランザクションを開始しないし、コミットもしない
** テスト駆動開発をしているなら、''Transaction Rollback Teardown'' を応用すると最終的にこういう設計になります

* 既存システムに後付けで ''Transaction Rollback Teardown'' なテストを書くためには
** 事前に ''Humble Transaction Controller'' を使うようにリファクタリングしなければなりません

* テストの前後でデータベースの状態が変わらないところはナイスです

* どれを掃除するか、または掃除しないかを決める必要がありません

* データベースのスキーマやデータの変更は、teardown ロジックに何も影響しません

* ''Table Truncation Teardown'' (pp.661) よりシンプルです

* 実際のデータベースでテストを実行するときの注意点
** データベースアクセスのないテストに対して 50 倍時間がかかります
** ''In-Memory Database'' (pp.551) に置き換えない限り ''Slow Tests'' (pp.253) になってしまいます
** トランザクション機能に依存してるので、ACID をサポートしてない単純な Fake Database では荷が重いです
** どこかでトランザクションがコミットされてしまっても何もできません

* よく分からない箇所でコミットされるせいで混乱した例を紹介しましょう
[[担当割当表/PARTⅢ/Transaction Rollback Teardown/Column]]

!! Implementation Notes

* 本体だけでこのパターンをサポートしている xUnit ファミリーはあまり多くありません
** オープンソースの拡張はいくつかあります
* もし何もなくても、自分で実装するのは簡単です
* 真剣に考慮すべきは、テストに、SUT のトランザクション不要なメソッドにアクセスさせることです
** ほとんどのドメインオブジェクトはトランザクション不要なので、ドメインオブジェクトのユニットテストではそれほど問題ではないです
* ''Subcutaneous Test'' (pp.337) を書くときに問題になるでしょう
** ''Service Facade'' [CJ2EEP] がトランザクション管理をするからです
** トランザクション不要なメソッドを公開するために、''Humble Transaction Controller'' パターンへのリファクタリングが必要かもしれません
** トランザクション不要なメソッドを、''Decorator'' [GOF] に委譲することも可能です
*** ''Poor Mans Humble Object'' と呼ばれる方法です

* クライアントから見えないメソッドがあるなら、テストのためにこれを公開しなければなりません
** ''public'' にしてテストすることができます
** ''Test-Specific Subclass'' (pp.579) によって間接的に公開することもできます
** ''Extract Tesable Component'' (pp.735) によって、トランザクション不要なメソッドを他のクラスの公開メソッドにすることもできます

* 更新されたデータの読み込みは、同一のトランザクション内で起こなわれなければなりません
* 普通は問題ないです
* シミュレーションやテストが、並列に実行されるときは問題になります
* ORM を使っている場合は、ORM に変更をデータベースに書き込ませなければなりません
** ''EntityManager.flush'' とか (EJB 3.0)
** データベースを直接読むオブジェクトがいるから

!! Motivating Example

!! Refactoring Notes

