{{toc}}

! Testcase Class per Feature

''How do we organize our Test Methods onto Testcase Classes?''

''We group the Test Methods onto Testcase Classes based on which testable feature of the SUT they exercise.''

* ''Test Methods'' (pp.348) が増加するにつれて、どの ''Testcase Class'' (pp.373) に配置するかを決めなければいけなくなる
* ''Testcase Class per Feature'' 
** 私達が「テストの "big picture" を容易に理解できるようになる」ことに作用するテスト組織化の戦略
** フィクスチャーセットアップの方法にも影響する
** テストメソッドを壊さずに、巨大なテストケースクラスをいくつかの小さなクラスに分割する体系的な方法を与えるものです

!! How It Works
* テストメソッドが、検証されるべき機能ごとに用意されたテストケースクラスに集まります
* より小さいテストケースクラスが得られます
* 特定の機能についてのテスト結果を一瞥することができるようになります

!! When to Use It

* ''Testcase Class per Feature'' を使う状況
** 大量のテストメソッドを持っている
** SUT の提供する機能 (feature) の仕様を明確にしたいと望んでいる
* ''Testcase Class per Feature'' が実現しないこと
** 個々のテストメソッドを単純にできるわけではない
** テストメソッド自体が分かりやすくなるわけではない
** これらは ''Testcase Class per Fixture'' (pp.631) によって解決されます
* ''Testcase Class per Feature'' を使ってもしょうがない状況
** SUT の個々の機能がせいぜい 1 つか 2 つのテストメソッドしか必要としていない
** ''Testcase Class per Class'' (pp.617) で十分でしょう

* あるクラスがいくつもの機能を持っていること自体が一種の"悪臭"(smell) です
** 責務が多すぎ
* ''Testcase Class per Feature'' を使う典型的な状況
** ファサードクラスのメソッドに対する顧客テスト

!!! Variation: Testcase Class per Method
* 引数に様々なパラメータを受け取るメソッドには、多くのテストが必要になります
* この 1 つのメソッドに対するテストメソッドは 1 つの ''Testcase Class per Method'' にしましょう
* 残りは他のテストケースクラスに入れましょう

!!! Variation: Testcase Class per Feature
* あるクラスの "feature" は普通は 1 つの操作ないし関数になります
* しかし、当該オブジェクトのインスタンス変数を操作するメソッドがひとまとまりになっている場合もあります

* Java Bean のセッター、ゲッターは、合わせて 1 つの "feature" と見なされています

* [CJ2EEP] の 'Data Access Object' はオブジェクトの読み書きそれぞれを行うメソッドを提供します
* 別々にテストするのは困難です
* そこで私達は、あるオブジェクトの読み書きをすることを 1 つの "feature" として取り扱っています

!!! Variation: Testcase Class per User Story
* それぞれのストーリーのテストメソッドを、異なるテストケースクラスに置きます
** XP のように漸進的な開発をしている場合は有用な方法です
* このプラクティスはコミットに関連した衝突を回避します
** 同じ SUT クラスを使って別のストーリーを開発しているメンバーがいる場合など
* このパターンは、最終的な結果が他のパターンと同じになったりならなかったりします
** ユーザーストーリーをどのように分割するかによります

!! Implementation Notes
* テストケースクラスが SUT の 1 つの機能に対する要求を示すようになります
** テストケースクラスの名前が、テストが検証する機能を示すような名前となるように働きます
** テストメソッドの名前も同様です
* この命名規則は、テストケースクラスやテストメソッドの名前を見るだけで、テスト条件を一瞥できるようにします

* 1 つの結果として、1 つのプロダクションクラスに対する多数のテストケースクラスが作成されます
* 1 つのクラスに関連する全てのテストを実行したくなるので、全てのテストケースクラスは、1 つのフォルダ・パッケージ・名前空間に入れるべきです
** ''Test Enumeration'' (pp.399) を使っているなら、''AllTest Suite'' (''Named Test Suite'' pp.592) によって 1 つのテストスイートに集めることができます

!! Motivating Example
* 例では、''Flight'' クラスのテストメソッドを ''Testcase Class per Class'' パターンによって構成しています
** ''Flight'' クラスには 3 つの状態 (''Unscheduled, Scheduled, AwaitingApproval'') があります
** ''Flight'' クラスには 4 つのメソッド (''chedule, requestApproval, deSchedule, approve'') があります
* ステートフルなクラスなので、少なくとも 1 つのメソッドごとに 3 つの状態でのテストが必要です
** 省略した部分は ''Testcase Class per Class'' の章にあります

* 例では、''Fresh Fixture'' (pp.311) を構成するために ''Delegated Setup' (pp.411) を使っています
** 宣言的にフィクスチャを構築しているせいか、ちょっと長いし、ごちゃごちゃしています
** 4 つの異なるテストメソッドがあるのも影響しています
* ''Testcase Class per Future'' パターンにリファクタリングするにはよい例でしょう

!! Refactoring Notes
* ''Testcase Class per Future'' パターンに変換することで
** テストケースクラスを小さくできます
** テストメソッドの名前を意味のあるものにできます

* 最初に、どれだけのテストケースクラスを作るか決めて、テストメソッドがどこに入るべきかを決めます
** 他と比べて小さくなりそうなテストケースクラスがあれば、そこから始めれば仕事がやりやすくなります
* 2 番目に、''Extract Class'' によって新しいテストケースクラスを作り、exercise する機能を説明する名前を付けます
* 3 番目に、''Move Method'' (コ・ピ・ペ) によって、テストメソッドを関連するインスタンス変数もろとも新しいクラスに移動します

* 1 つの機能について、元となるテストケースクラスに対して上述の手順を繰り返します
** 新しいテストケースクラスの名前は検証する機能に沿った名前に変えます
** 全てのテストケースクラスはコンパイル・実行できていなければなりません

* まだ完了してません

* ''Testcase Class per Future'' パターンの恩恵を受けるため、もうひと手間

* それぞれのテストメソッドが検証する内容を意図した名前となるよう、''Rename Method'' を行います

