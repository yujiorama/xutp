{{toc}}

!! Parameterized Test (pp.607)

!!! 前書き
''同じロジックがいくつものテストコードに現われる場合、どうやって Test Code Duplication を減らせばよいか''

'''フィクスチャーのセットアップと結果の検証に必要なパラメータを、テストの完全なライフサイクルを実装したユーティリティメソッドに渡しましょう。'''

https://cacoo.com/diagrams/pI0cKecU9ipqOrrr-CAD5E.png

* テスティングはくどくなりやすい
** 同じテストを何度も実行する
** 同じようだけどちょっと違うテストがたくさんある
* 例
** システムへの入力値とシステムの出力の検証値がほとんど同じで、本質的に同じようなテスト
** こういったテストはほとんど同じ処理手順になっている
* 良いコードカバレッジを維持するために
** 膨大なテストを用意しておくのは優れた手段
* 膨大なテスト
** メンテナンス性の点からは魅力に欠ける
** 1 つのテストにおけるアルゴリズムの変更が他の似たようなテストすべてに影響する
* ''A Parameterized Test''
** たくさんの ''Test Method'' において同じテストロジックを再利用するための手段を提供する

!! How It Works (pp. 608)

* 共通的なロジックを括り出してユーティリティメソッドにする
** このメソッドが  ''Four-Phase Test'' (pp. 358) を含んでいたら、結果として ''Parameterized Test'' になる
*** fixture setup、exercise、SUT、result verification、fixture teardown
** 最小のコードで、最良のカバレッジが得られる
** メンテナンスもしやすい

* 良いユーティリティメソッドはテストコードを小さくさせる
** 一連の複雑な処理を、1 行の単純な処理にできる

* テストコードに似通ったところを見つけた場合
** 共通部分を括り出して ''Test Utility Method'' (pp.599) にする
** テストによって異なる情報をパラメタとして受け取るようにする
** ''Test Method'' は、''Parameterized Test'' が動作するために必要なテストによって変わる情報をパラメタとして引き渡す


!! When to Use It (pp. 608)
* ''Test Code Duplication'' になっているときはいつでも
** 同じアルゴリズムのテストにちょっとだけ違うデータを使っている

* データの違いは ''Parameterized Test'' の引数の違いになる

* ロジックはユーティリティメソッドに隠蔽される

* ''Obscure Test'' (pp.186) を無くす
** 同じロジックを繰り返し書く回数が減る
** ''Testcas Class'' (pp. 373) がよりコンパクトに

* ''Data-Driven Test'' (pp.288) への足がかり
** ''Parameterized Test'' は ''Data-Driven Test'' における動詞 (動作語)
** 引数は属性

* fixture setup をしないユーティリティメソッドは ''Verification Method''
** ''Custom Assertion'' (pp.474) を参照
** SUT の exercise もしないなら、それは ''Custom Assertion'' と呼ばれる

!! Implementation Notes (pp. 608)

!!! Variation: Tabular Test (pp. 609)
Row Test

!!! Variation: Incremental Tabular Test (pp. 609)

!!! Variation: Loop-Driven Test (pp. 610)

!! Motivation Example


!! Refactoring Notes

!!! Example: Parameterized Test

!!! Example: Independent Tabular Test

!!! Example: Incremental Tabular Test

!!! Example: Tabular Test with Framework Support (MbUnit)

!!! Example: Loop-Driven Test (Enumerated Values)

!!! Example: Loop-Driven Test (Calculated Values)

!! Furthre Reading

* DDSteps extension for JUnit
** http://www.ddsteps.org
* Tabular Test (Clint Shank)
** http://clintshank.javadevelopersjournal.com/tabulartests.htm
