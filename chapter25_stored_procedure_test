{{toc}}

! Stored Procedure Test

''How can we verify logic independently when we have stored procedures?''

'''We write Fully Automated Tests for each stored procedure.'''


* アプリケーションには、その状態を永続化するためにデータベースを使用するものがあります
** 中には、ストアドプロシージャやトリガーを使ってパフォーマンスを稼いだり、更新処理を共通化したりしてます

* このパターンは、データベースの中に置いてあるコードについて、テスト自動化のプラクティスを適用します

!! How It Works

* アプリケーションとは独立して、ストアドプロシージャのためのユニットテストを書きます
** レイヤー交差テスト、回帰テストになります
** テスト対象のストアドプロシージャの性質によって変わります

!! When to Use it

* 重要なロジックをストアドプロシージャに置いてるなら、テストを書くべきです
** ストアドプロシージャが SUT になります
** アプリケーションとは独立して検証できるようになります

* ''Stored Procedure Tests'' が重要なテストになるケース
** 1 つ以上のアプリケーションから利用されるような場合
** 他のチームによって開発される場合
** アプリケーションのテストによって適切にテストされることが保証できない場合
*** Indirect Testing のようなテスト

* ストアドプロシージャが呼ばれるような全ての状況を列挙し、その振る舞いを確認できます
** 状況をよく検討することで、設計を進歩できます
** TDD の普遍的な成果です

!! Implementation Notes

# ストアドプロシージャと同じ言語でテストを書いて、データベース側で実行する
# アプリケーションの言語でテストを書いて、''Remote Proxy''[GOF] でストアドプロシージャにアクセスする

* どちらの方法でもテストは書けます
* ストアドプロシージャの開発担当者は (1) の方法でユニットテストを書くでしょう
* アプリケーションの開発担当は (2) の方法で受け入れテストを書くでしょう
** そしてアプリケーションのビルド時に実行するでしょう

* どちらにしても、フィクスチャーの生成や、期待結果の検証をどうするか決めなければなりません
** "before": テスト前のデータベース
** "after": cascading delete など期待される振る舞いの後のデータベース

* テストは、データの insert や verify をするために直接データベースとやりとりすることになるでしょう
** ''Back Door Manipulation'' (pp.327)
** 他のストアドプロシージャも使えるでしょう (回帰テストの一種)

!!! Variation: In-Database Stored Procedure Test

* テスト自動化に xUnit を使う利点は、テスト対象のコードと同じ言語でテストを書けることです

* 新たな言語やデバッガの学習をしなくてもよいので、開発者に自動テストを学んでもらいやすくなります

* 突き詰めると、ストアドプロシージャのテストはストアドプロシージャで書いてもらえばよいということになります

* この場合、テストはデータベースの内部で実行されることになるため、''Integration Build'' と一緒に実行するのは厳しいです

* ''In-Database Stored Procedure Test'' は、次のような場合に有効です
** 開発者が、ストアドプロシージャ言語やその環境について、アプリケーションのそれよりも詳しい
** 1 つの環境ですべてのテストを実行する必要が無い

* ストアドプロシージャの担当になったチームには魅力的な方法でしょう

* ストアドプロシージャが、アプリケーションコードとは異なるリポジトリに保存されている場合も、このパターンが有効かもしれません
** テストコードを SUT と同じリポジトリに置くことができるからです

* ユニットテスト、およびテスト駆動開発において、テストコードから実装の詳細へアクセスしやすいという点もあります
** カプセル化を破るので、''Overspecified Software'' (pp.239) になってしまうかもしれません

* クライアントコードにデータアクセスレイヤがある場合
** エラー (接続異常など) を正しく扱っていることを保証するために、アプリケーションのプログラミング言語でユニットテストを書きましょう

* データベースソフトウェアの中には、いくつかのプログラミング言語をサポートしているものもあります
** テストは、テストの書きやすい言語で書きましょう
** ストアドプロシージャは、できるだけ伝統的なストアドプロシージャ言語で書きましょう

* Oracle は PL/SQL と Java の両方をサポートしています
** PL/SQL のストアドプロシージャをテストするために JUnit が使えます

* MS SQL Server は C# をサポートしています
** Transact-SQL のストアドプロシージャをテストするために NUnit が使えます

!!! Variation: Remoted Stored Procedure Test

* テストを、クライアントアプリケーションのプログラミング言語で書けます
* ストアドプロシージャのアクセスには ''Remote Proxy'' [GOF] を使って、詳細を隠蔽します
* プロキシは ''Service Facade'' [CJ2EEP] や ''Command'' [GOF] として構成されます
** Java の JdbcOdbcCallableStatement は ''Command'' に相当します

* このパターンは、ストアドプロシージャを "ブラックボックス" としたコンポーネントテストになります
** データベースの内部で実行しないからです

* 回帰テストにするのがお勧めです
** フィクスチャーの生成や結果の検証がが困難であれば、他のストアドプロシージャを使います
** 他に必要なタスクがあればそれも実行します
** xUnit ファミリーには、そういった機能を持たせるための拡張版があります
*** Java なら DbUnit
*** .NET なら NDbUnit

* すべてのテストを 1 つの言語で統一するにはよい方法です
** アプリケーションコードの変更をチェックインするたびにテストを実行するのが簡単になります

* この性質は、クライアントコードとは別のチームによってストアドプロシージャが開発される場合は特に役立ちます

* 他のチームの開発者が欠陥無しのコードを書いてくれるとは信じられない時もこのパターンを適用します
** たぶん彼らは ''In-Database Stored Procedure Tests'' も書いてない
** 受け入れテストとして使えるパターンです
** 実際の例をコラムに書きました

[[担当割当表/PARTⅢ/Stored Procedure Test/Column]]

* 欠点はテストの実行に時間がかかることです
** データの準備に時間がかかるからです
* テストを ''Subset Suite'' (pp.592) に分割すれば、インメモリテストで全てを実行する必要はありません
** だいぶ速くなります
** ''Slow Test''(pp.253) は避けられます

* このパターンは、アプリケーションの言語で書かれたすでにユニットテストのあるロジックを、データベースに移植するときも役立ちます
** すでにユニットテストがあるので、書き直さなくてよいからです
** お金と時間の節約になります
*** 異なる言語
*** 異なるテスト自動化フレームワーク (lpp.298)
** 書き直しで生じる変換エラーも防ぐことができます

!! Motivating Example

!! Refactoring Notes
