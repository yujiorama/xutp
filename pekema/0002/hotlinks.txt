
!! 開始

!! 好きな言葉

!! 尊敬する人

!! Jim Coplienから言われたこと

!! TDDBC

!! エナジードリンク

!! 若手に対するリスペクトとMac/Windows

!! TDDBCはキャズムを超えたのか？

!! TDDBCの持続可能な体制つくり

!! 印象深かったTDDBC

!! TDDBCの言語別参加者人数について

!! テストコードとプロダクトコードが別の言語がいいのか同じ言語がいいのか

!! TDDDBCの波及効果

'''大中''' TDDBC の参加者から聞いた話で、「WF だとテストファーストくらいしかできないけど、設計時点でテストしやすさを意識するようになった」という話があるとか。

おかざわさんは「プラクティスとしての TDD からは外れているんだけど、TDDBC を通じて得られるものは TDD 以外にも影響するんだな」と言っていた。

和田さんは参加者から得られる感想などで印象に残ることはありますか？

'''おかざわ''' 参加者から直接フィードバックを得られる機会はあるのかなぁと。

'''和田''' 一番多いのは twitter とか blog ですね。タグ付きでも無しでも。

あとは TDDBC でグリーンバンドって、よく配ったりしてるじゃないですか。

それってその後でも付けてる方を見ると嬉しいですね。すごく。

みんな現場に帰ってやってるのはレガシーコード改善ガイドの世界だったりするので、そういったものに対する立ち向かい方も含めて、学ぶポインタになる、きっかけになるものとしてやっていけるといいなと思っています。

TDDBC の理念というかやりたいこととしては、テスト駆動開発だけじゃなくて、ペアプログラミングとか、一つの課題を他の人はどう解くのかというのを見てもらうコードレビュー。

この 2 つはすごい重要なで、良いと言われているけど現場ではできないプラクティスだと思っていて、コードレビュー、ペアプログラミングを強制的に体験できる場を作る。

それはそれとして、一人一人が月曜日に現場に戻ると個人戦の世界になってしまうので。

テスト駆動開発はやっぱり個人のプログラミングスキルだと思っているので、テスト駆動開発とかレガシーコード改善とか、一人で成立し得るスキルとして学ぶためのきっかけを掴んでもらう場にしたいと思ってやっています。

その後レガシーコード改善ガイドとかテスト駆動開発入門を買って勉強していたり、グリーンバンドを左手にしたりしてるのを見るとすごい嬉しいですね。

!! TDD "Boost" Camp

'''大中''' 話は変わるんですが、"Boost Camp" という話があるじゃないですか。

僕としては TDDBC できっかけを得たら、あとは現場で実践して学んだことを持ちよって、ということを考えてるんですけど。

やっぱりそれが難しいというところもあるので、じゃあどういう場を作っていければいいんだろうと思っているんですけど。

'''和田''' TDDBC に参加した人が、その後でもう少し実践的なイベントをやりたい、という話ですよね。

'''大中''' そうですね

'''和田''' 札幌ですでに Web アプリという実践的なテーマをやっていて、これは東京でもやりたいと思っています。

それが Boost になるかどうかは分からないですけど。

TDDBC というイベントとしては、テスト駆動開発は未だに啓蒙段階だと思っています。

ペアプログラミングも TDDBC で初めてやったという方が圧倒的に多数ですしね。

そういう TDD とかペアプロ初心者に対して体験できる場を提供するのは、Boot Camp として続けたほうがいいんじゃないかと思います。

そこで僕が講演をしなくても形として、そういうイベントはまだニーズがあるし、続けていけたらと思います。

その後応用編としては、母体となるコミュニティがある場合はそこでやっていけばいいし。

'''和田''' TDDBC が他のイベントとやや特殊なのは、言語を跨ぐ傾向が強いんですね。

これは第一回から折り込み済みでやっているんです。

同じ問題を別の言語ではどうやって解くのかを知るのは体験としてすごく面白いので、これは第一にしたいなと思っています。

写真撮られると緊張するな。

'''和田''' TDDBC For <言語> というのがあって。

あれは良いところもあったし、本当は別の言語を見てもらいたいなって思うところもあって、個人的には悩んだところです。

例えば、「PHP のイベントだから参加した」「C++ のイベントだから参加した」という人が明らかにいるんですね。

'''皆''' うんうん

'''和田''' だから言語しばりのほうが参加しやすい人もいるし、そこはこれから考えないといきたいなと思っています。

'''杉野''' カフェでペアプロするとか、もうちょっと勉強会をばーんと立ち上げるんじゃなくて、僕は行ったことないけど asakusa.rb みたいに、とりあえず集まるみたいな。

'''和田''' とりあえず場だけあって

'''杉野''' そういうふうにやったほうが面白いんじゃないかって思ったりしてます。

'''和田''' だから、Boost ってやつはそうやったらいいんじゃないかと思ってます。各々分かれて研鑽を積む。

東京はまだ TDDBC に人がたくさん集まるのは、そういう場があると集まる性質があるのかなって思って。

長く主催者がいなかったというのも関係してるのかなと思います。

'''大中''' 1.5 のときの大塚さんってどういうきっかけで？

'''和田''' あれは、「東京で TDDBC 2 をやる企画はあるんですか？」というのをダイレクトメールか何かで聞かれて

'''大中''' うん

'''和田''' で、2 はまだ実現していないんですけど、2 を東京で冬とか来春とかにやろうみたいな企画はあって、「あるんだけどかなり先なんですよ」と返事をしたら、「小規模でいいからやることはできますか？」みたいなことを言ってて。

「主催者の言ったもの勝ちだからどんどんやりましょう」って話をして、1.5 という謎のバージョン番号が始まったんです。

'''大中''' これって載せちゃって大丈夫？

'''和田''' どこかで編集してください。

'''大中''' うーんと、TDDBC の緩い合意として、やろうとする人がいればそれを支援するよ、というのが伝わっているのかどうか。

'''和田''' 伝わりが甘いですかね、やっぱり。

'''大中''' どうなんですかね。

'''和田''' それはやっぱり問題点で、ポータルも大中さんの力でやっとできたくらいだし、参加したいって人はいるけど、主催できると思ってる人が少なかったんじゃないか疑惑はありますね。

'''大中''' うーん

'''和田''' 地方に行くと、基本的にコミュニティの大きさ自体は小さくなるので、勉強会をやりやすいというか、出やすいというのはあると思うんです。

東京は圧倒的に人が多いので、むしろ分散化の傾向が強いような。

'''大中''' コミュニティとしてもそうなんですけど、都市としての規模も桁違いなので、公的施設を押さえるとなると半年前から必要なんですよ。

'''和田''' あー、会場の問題ね。はいはいはい、それはありますね。

たしかに自社開催とか、会社を休日に貸してくれるとか、そういった支援がないと。

公的施設を借りるとなると東京は早めにやらないといけないししかも高いしみたいな感じですね。

札幌は超安くてびっくりしましたもん。そこはあるな。

そうすると、1.5 の時もそうだし、基本どこかの会社の会場を借りたりすると、箱は狭く小さくなるので倍率はどうしても高くなるし。

あんまり人を増やしすぎてもイベントとしての質を保ちにくいだろうなぁとも思ってるので。

ただ、開催を焦る必要は無いと僕は思ってて、まだ待ってる人がたくさんいるからもっと頻繁にやらなきゃとは、そんなに思い詰めなくてもいいんじゃないかと。

待てないなら自分で勉強すればいいだけだし。

'''おかざわ''' 勉強というところで出てくるのが、テスト駆動開発入門についての評判が「訳がひどい」「訳がひどい」「訳がひどい」。

'''和田''' はい。

'''おかざわ''' 原文も独特だという。

'''和田''' 原文はかなり独特ですね。

'''おかざわ''' 2000年くらいに出版されたんでしたっけ。

'''和田''' 2002年くらいだったかな。

'''大中''' そうですね、2002年か2003年か。

'''おかざわ''' やはり2010年代の入門本が必要というか

'''和田''' それが GOOS ですよ、という話になるとは思うんですけどね。

'''大中''' ぺけまも元々は出版プロジェクトだったわけで

'''和田''' まぁね。本、本なぁ。

'''杉野''' 出版と言えば、Web+DB Press の和田さんの記事をまとめたものが出るとか出ないとか

'''和田''' あれは記事をまったく忙しすぎて書けなくてぽしゃりました

本を書くってやっぱりものすごい集中的な力を必要とするので、本業をやりながらだとやっぱりかなり負荷がかかりますね。

もっと、Web 媒体とかで小出しにできるインフラが無いとつらいなあと。僕に力が無いだけなんですけど。

'''大中''' いやいやいや

!! TDDの記事を書くのは難しい

'''和田''' TDD のことを本に書こうとすると、結構難しいんですね。Kent の TDD 本でも、マネーとか現実には使わねぇよとかいろいろ。

基本的にあれは置き換え可能なパターンの話であって。

自分の目の前の問題に対してどうやって適用するかっていうのは、原理・原則とか、一つ一つの所作を自分の問題に応用していくという話なので。

'''大中''' うんうん

'''和田''' 現実の自分たちが作っている Web アプリであるとか、組み込みソフトであるとか、そういったもので TDD をどうやるかという話を本にしようとすると、分量としては圧倒的に増えてしまう。

本質的ではない記述がけっこう増えてしまうので悩ましい。maven の pom.xml を書くだとか、データベースをセットアップするだとか。

'''大中''' はいはい

'''和田''' TDD のエッセンスを書こうとすればするほど、サンプルは必要十分な大きさになるので。

小さすぎると結局スタックとかになると、オブジェクト指向を哺乳類で説明するみたいな話になって、こんなのは現場では必要とされてないみたいな。

ただ、リアルな方向に行こうとすると、今度はモックとかスタブの話が出てきて。

データベースとかネットワークとかファイルとか Web とか。

そういうのは基本的に TDD の、例えば Kent Beck の本であった原則を応用して、戦っていくところなんだけど。

そこを結びつけるところがミッシングリンクになっちゃっているというのはありますね。

'''和田''' 生きたサンプルとか web 上、github とかに転がっているし、洋書ではある程度リアリスティックなアプリケーションを TDD で開発するものがある。

和書ではそんなにないけど。

だから、分かっている人は日々の開発に応用していけるけど、入門する人の間には大きなギャップがあるなとは思います。

'''おかざわ''' この前テスト駆動開発 JavaScript 本が出ましたよね。

'''和田''' はいはい。

'''おかざわ''' 実際のニーズとしては Java が多いんだけど、Java による TDD の本は 2002 年から出版されていないように思う。

'''和田''' そう言われれてみればそうかなぁ。どうかなぁ。

'''大中''' 僕が思いつくのは安藤さんの Eclipse と JUnit の本なんですけど。これが 2003 年。

'''和田''' はいはいはい

'''大中''' あとソフトウェアテストの本で JUnit を取り上げてるっていうのは何冊もあります。

'''和田''' それはありますね。

'''大中''' あと、kanu さんが togetter でまとめていた「TDD の本は売れない」っていう

'''和田''' なんかそんなのありましたね。どんな結論なんでしたっけ。

'''大中''' どっちかというと議論は発散してしまって、TDD は受け入れられない、という話になってしまった。

'''和田''' 本が売れない時代なんですよね。そもそも。

!! 見られるということ

'''和田''' やはりプロセス、過程が大事なんですね。TDD で開発された Java のオープンソースのコードなんていくらでもあるし。

だから開発されたものを見ても TDD を学べない、というのが大きいのかなと思ってます。

僕が Web+DB Press で 0 から書いたのは、そういう思いがある。

ブログの RSpec の記事でも 0 から初めているのは、やっぱり差分をひたすら見せる、というスタイル、あるじゃないですか。

これも過程を追体験してもらいたいな、というところから。

Web+DB Press のときもブログに書いた RSpec の時も、基本的には変わらないです。

伝えたいことをまず、頭の中でプロットを引いて、その伝えたいことを順番になるように、一回一回シナリオごとにブランチ切りながらやってみて、一番うまく説明できるものになったとき、起点になるところから最後のところまでを、git log とか svn log とかで一本につないで、その間の差分を diff 形式でばーっと取っていって。

そうすると基本的にコミットコメント・diff・コミットコメントという構成になるから、そこに伝えたいことを本文に埋めていく。

やはり、説明したいことに対してきちんと対応付いているサンプルコードとその差分、というものから、説明を整理するという見せ方をすることが多いですね。

'''大中''' 関連する話なんですけど、テストを駆動させてテストを成長させていく動機付けになるのって、やっぱり Jenkins とかでテストケースが増えてるとかカバレッジが順調に増しているとか、そういうテストが育っていることが分かるというのがあるのかなと。

'''和田''' テストコードを書いていくモチベーション、おーなるほど。

'''大中''' 紙とか文書ベースだとそういうところを見せていくのが難しい。

'''和田''' たしかに。

'''大中''' 例えば Jenkins とかで 100 件テストがあって 5 件 RED があったら、なんとか潰して全部 GREEN にしたい、というのがあるんですよ。

'''和田''' やっぱり TDD というものを伝えることに対して、本という媒体があまり向いていない、ということはあるかもしれない。

僕が Web+DB Press の Vol.35 で動画企画をやったじゃないですか。リプレイ動画みたいなの。

あれはやっぱり本を読むとリズムが分からないから。

だから、一緒に動画を付けたりしゃべりながらコードを付けることによって、どういう順番でやっていて、どういうことを考えてて、
どういう書き順でコードを書きました、というのを動画で見てもらう、という企画を立てたんですね。Vol.35 と Vol.37 で。

Vol.35 のときはスクリーンキャストに声を別録りしたのですごい大変でした。

Vol.37 のときは逆にしゃべりながらライブコーディングなのでミスができない一発録り、どっちもどっちで大変でした。

Vol.35 の映像編集の方がすごい頑張ってくださったんですけど、もう一回は難しいから Vol.37 ではしゃべりながらやることになりました。

'''大中''' ペアプロとか TDD とか結構デモって難しいですよね。

'''和田''' デモは難しい。やっぱり経験とか、練習とか、度胸とか、いろいろ必要なのでやっぱり一発でデモって大変ですよ。
すごく緊張しますし。

'''大中''' ちょっとオフレコなんですけど、こないだの TDDBC 横浜のとき、川西さんと神速さんならまぁ大丈夫だろうと思って。

あまり事前に詰めずにお二人におまかせでやってみたらあんな感じだったんですね。

'''和田''' そうですね。デモ難しい。

'''大中''' 公開きゃっきゃうふふ

'''和田''' それは川西さんと神速さんがなんかいちゃいちゃしているところ？

'''和田''' 人前でコードを書くという経験はすっごい強烈なので、逆にそういう練習しないで壇上に立つと頭真っ白になりがちなので。

'''おかざわ''' それのミニマムがペアプロですよね。

'''和田''' そう。だからペアプロですらすごい緊張する。

自分がコード書いてるところって人に見せるものではないっていう感覚が強い、プライベートなものなので。

それが常に見られているっていうのはすごい精神的なプレッシャーですよね。

見られてないと人間真面目に仕事しないというところもあるので、ペアプロのいい面と悪い面がある、という経験はすごい成長の元になると思います。

講演もそうだしブログもそうだし。

!! 主催者始めました

'''おかざわ''' 和田さん自身地方で講演して回ったりとか、Devsumi で発表したりというのは糧になっていますか？

'''和田''' 糧にはなってますよ。アウトプットするとインプットがすごい増えたりするし、人からの反応もたくさんくるし。

'''おかざわ''' 懇親会などで直接会話された中で印象に残っているお話などありますか？

'''和田''' 福岡の主催者の @pocketberserker さん (中山さん) は、佐賀から名古屋に来て。

勉強会初参加が TDDBC 名古屋だったらしいのですけど、それがすごい強烈な体験になったと思いますね。

関数型の人はいるし、ペアプロはやるし、夜はホテル借り切って修学旅行みたいにハッカソンやるしで。

地方の TDDBC は 2 日間コースなので、基本宿を借り切ってやるパターンが多いんですね。

そうすると、夜も普通にみんな集ってプログラミングしたりするので、そういう体験ていうのは、2 日間構成ならではみたいな。

東京でもできたら面白そうですけど、そういう土地柄でもないのかなと思わなくはないし。

'''大中''' 横浜やったときも考えたんですけど、2 日間コースだとやっぱり参加費とかが跳ね上がっちゃうのが。

あと、土日両方やるとなると敷居が上がるというか。

'''和田''' 上がります。上がります。

'''大中''' 横浜も最初は 2 日間コースで考えてたんですよ、泊まりで。

!! TDDはユーザの価値に寄与するか？

'''杉野''' TDD がユーザーにとって価値を提供できているのか実感できているかっていうことについて。

'''和田''' あー。基本的に TDD が寄与するのは内部の質に関するものですよね。

だから直接お客様にフェイスするところかっていうとそういうところもあるけど、それよりは、生で返ってきたものに対して自信を持つことがある。

TDD ってリファクタリングが常にセットじゃないですか。

なので、一定速度、自分達が予測できるスピードで価値を提供し続けることができるというところにお客様に対する TDD の価値はあるので。

テスト駆動開発は、お客様に「テスト駆動開発やってます」って胸を張って言うことではないんですよね。基本的に。

プロだから当然やってますよ、という話。自分達が書くコードに対して、技を尽くしてますという話なので。

お客様 (エンドユーザ、受託開発) に対して、「テスト駆動開発やってます」ということを売りにするということは実はそんなに無いです。

言われることはあるんですけどね。僕に仕事がくる場合「テスト駆動開発でやってください」というのは多いので。

それは構図としては、僕宛てに来たのでそうなっちゃってるのかな。

'''おおなか''' 自分の感想で言うと、シビアな仕様変更とか、デグレ無しでスパンといけちゃうとかは

'''和田''' テストコードがあってよかったなと

'''おおなか''' そう。TDD によって価値を提供できているなと。

'''和田''' そうですね。

やっぱりプレッシャーがかかる側面、急激な仕様変更、急激なリリースであるとか。そういうときに。

人間的にプレッシャーがかかると視野がぐっと狭くなって、自分の頭でチェックできる領域がすごく狭くなってしまうときに、
機械が、それまでにやってきたことが助けてくれるというのが、テスト駆動開発などを行ってテストコードを用意してきたことの
大きい御利益が得られる瞬間ですよね。

開発期間が長くなったりすると隅々の仕様とかは覚えてないし、隅々のテストコードとか覚えてなくても、
何か変えてどこかテストコード落ちてれば、これまでと動きが変わったというのがはっきり Yes/No で分かる、
というのは自信、安心に繋がりますね。

!! MSの9割減			（TODO:出典ある？）

!! テスト駆動開発者は3週目に死ぬ？

!! OUTSIDE INとINSIDE OUT

!! パターン厨のはしか

!! お風呂で本を読む	

!! TDDBCにこれから参加する人ともう参加した人に目標としてもらいたいこと

!! 好きな女性のタイプ

!! XUTP読書会が2年続いた理由

!! ぺけまVol.1はぶっちゃけ何点？

!! ぺけまの今後
